import java.sql.*;
import java.util.Scanner;

public class LibraryManagementApp {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/library";
    private static final String DB_USERNAME = "username";
    private static final String DB_PASSWORD = "password";

    private Connection connection;

    public LibraryManagementApp() {
        try {
            connection = DriverManager.getConnection(DB_URL, DB_USERNAME, DB_PASSWORD);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void displayBooks() {
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM books");

            System.out.println("Lista książek:");
            while (resultSet.next()) {
                int bookId = resultSet.getInt("id");
                String title = resultSet.getString("title");
                String author = resultSet.getString("author");
                String status = resultSet.getBoolean("is_available") ? "Dostępna" : "Wypożyczona";
                System.out.println(bookId + ". " + title + " - " + author + " (" + status + ")");
            }

            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void addBook(String title, String author) {
        try {
            PreparedStatement statement = connection.prepareStatement(
                    "INSERT INTO books (title, author, is_available) VALUES (?, ?, ?)"
            );
            statement.setString(1, title);
            statement.setString(2, author);
            statement.setBoolean(3, true);
            statement.executeUpdate();
            statement.close();
            System.out.println("Książka została dodana do biblioteki.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void searchBooks(String keyword) {
        try {
            PreparedStatement statement = connection.prepareStatement(
                    "SELECT * FROM books WHERE title LIKE ? OR author LIKE ?"
            );
            statement.setString(1, "%" + keyword + "%");
            statement.setString(2, "%" + keyword + "%");
            ResultSet resultSet = statement.executeQuery();

            System.out.println("Wyniki wyszukiwania dla: " + keyword);
            while (resultSet.next()) {
                int bookId = resultSet.getInt("id");
                String title = resultSet.getString("title");
                String author = resultSet.getString("author");
                String status = resultSet.getBoolean("is_available") ? "Dostępna" : "Wypożyczona";
                System.out.println(bookId + ". " + title + " - " + author + " (" + status + ")");
            }

            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void markBookAsAvailable(int bookId) {
        try {
            PreparedStatement statement = connection.prepareStatement(
                    "UPDATE books SET is_available = ? WHERE id = ?"
            );
            statement.setBoolean(1, true);
            statement.setInt(2, bookId);
            statement.executeUpdate();
            statement.close();
            System.out.println("Książka oznaczona jako dostępna.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void markBookAsBorrowed(int bookId) {
        try {
            PreparedStatement statement = connection.prepareStatement(
                    "UPDATE books SET is_available = ? WHERE id = ?"
            );
            statement.setBoolean(1, false);
            statement.setInt(2, bookId);
            statement.executeUpdate();
            statement.close();
            System.out.println("Książka oznaczona jako wypożyczona.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void closeConnection() {
        try {
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        LibraryManagementApp libraryApp = new LibraryManagementApp();

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- APLIKACJA DO ZARZĄDZANIA BIBLIOTEKĄ ---");
            System.out.println("1. Wyświetl książki");
            System.out.println("2. Dodaj książkę");
            System.out.println("3. Wyszukaj książki");
            System.out.println("4. Oznacz książkę jako dostępną");
            System.out.println("5. Oznacz książkę jako wypożyczoną");
            System.out.println("0. Wyjście");
            System.out.print("Wybierz opcję: ");
            int option = scanner.nextInt();
            scanner.nextLine(); // Clear the input buffer

            switch (option) {
                case 1:
                    libraryApp.displayBooks();
                    break;
                case 2:
                    System.out.print("Podaj tytuł książki: ");
                    String title = scanner.nextLine();
                    System.out.print("Podaj autora książki: ");
                    String author = scanner.nextLine();
                    libraryApp.addBook(title, author);
                    break;
                case 3:
                    System.out.print("Podaj słowo kluczowe do wyszukania: ");
                    String keyword = scanner.nextLine();
                    libraryApp.searchBooks(keyword);
                    break;
                case 4:
                    System.out.print("Podaj numer książki do oznaczenia jako dostępna: ");
                    int availableBookId = scanner.nextInt();
                    libraryApp.markBookAsAvailable(availableBookId);
                    break;
                case 5:
                    System.out.print("Podaj numer książki do oznaczenia jako wypożyczona: ");
                    int borrowedBookId = scanner.nextInt();
                    libraryApp.markBookAsBorrowed(borrowedBookId);
                    break;
                case 0:
                    libraryApp.closeConnection();
                    System.out.println("Dziękujemy za korzystanie z aplikacji. Do widzenia!");
                    return;
                default:
                    System.out.println("Nieprawidłowa opcja. Wybierz ponownie.");
            }
        }
    }
}
/*

CREATE TABLE books (
  id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(100) NOT NULL,
  author VARCHAR(100) NOT NULL,
  is_available BOOLEAN NOT NULL
);

-- Wstawianie przykładowych danych
INSERT INTO books (title, author, is_available) VALUES
('W pustyni i w puszczy', 'Henryk Sienkiewicz', true),
('Harry Potter i Kamień Filozoficzny', 'J.K. Rowling', true),
('Władca Pierścieni: Drużyna Pierścienia', 'J.R.R. Tolkien', false),
('Duma i uprzedzenie', 'Jane Austen', true);
*/
